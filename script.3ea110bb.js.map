{"version":3,"sources":["script.js"],"names":["api_url","getapi","url","fetch","response","json","data","console","log","hideloader","show","document","getElementById","style","display","tab","r","id","name","country","industry","numberOfEmployees","innerHTML","filterValues","country_filter","industry_filter","tr","country_td","industry_td","i","countryTxt","industryTxt","value","toUpperCase","getElementsByTagName","length","textContent","innerText","indexOf","sortTable","n","direction","table","rows","switching","x","y","shouldSwitch","dir","switchcount","toLowerCase","parentNode","insertBefore"],"mappings":"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","file":"script.3ea110bb.js","sourceRoot":"..","sourcesContent":["const api_url = \"https://dujour.squiz.cloud/developer-challenge/data\";\n\n// Defining async function\nasync function getapi(url) {\n    \n    // Storing response\n    const response = await fetch(url);\n    \n    // Storing data in form of JSON\n    var data = await response.json();\n    console.log(data);\n    if (response) {\n        hideloader();\n    }\n    show(data);\n\n}\n// Calling that async function\ngetapi(api_url);\n  \n// Function to hide the loader\nfunction hideloader() {\n    document.getElementById('loading').style.display = 'none';\n}\n// Function to define innerHTML for HTML table\nfunction show(data) {\n    let tab = \n        `<tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th>Country</th>\n          <th>Industry</th>\n          <th>Number of Employees</th>\n         </tr>`;\n    \n    // Loop to access all rows \n    for (let r of data) {\n        tab += `<tr> \n    <td>${r.id} </td>\n    <td>${r.name}</td>\n    <td>${r.country}</td> \n    <td>${r.industry}</td> \n    <td>${r.numberOfEmployees}</td>          \n</tr>`;\n    }\n    // Setting innerHTML as tab variable\n    document.getElementById(\"clients\").innerHTML = tab;\n\n}\n\n\n  function filterValues() {\n    // Declare variables\n    var  country_input, country_filter, industry_input, industry_filter, table, tr, country_td,industry_td, i, countryTxt, industryTxt;\n    country_input = document.getElementById(\"country\");\n    country_filter = country_input.value.toUpperCase();\n    industry_input = document.getElementById(\"industry\");\n    industry_filter = industry_input.value.toUpperCase();\n    table = document.getElementById(\"clients\");\n    tr = table.getElementsByTagName(\"tr\");\n    countryTxt = \"\";\n    industryTxt = \"\";\n    // Loop through all table rows, and hide those who don't match the search query\n    for (i = 0; i < tr.length; i++) {\n        country_td = tr[i].getElementsByTagName(\"td\")[2];\n        industry_td = tr[i].getElementsByTagName(\"td\")[3];\n        if (country_td || industry_td) { \n        countryTxt = country_td.textContent || country_td.innerText;\n        industryTxt = industry_td.textContent || industry_td.innerText;\n        console.log(countryTxt);\n        if ((countryTxt.toUpperCase().indexOf(country_filter) > -1) && (industryTxt.toUpperCase().indexOf(industry_filter) > -1)) {\n          tr[i].style.display = \"\";\n        } else {\n          tr[i].style.display = \"none\";\n        }\n      \n    }\n}\n}\n\nfunction sortTable(n, direction) {\n    console.log('sort');\n    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;\n    table = document.getElementById(\"clients\");\n    switching = true;\n    // Set the sorting direction to ascending:\n    if(direction){\n        dir = direction;\n    }\n    else{\n        dir = \"asc\";\n    }\n    /* Make a loop that will continue until\n    no switching has been done: */\n    while (switching) {\n      // Start by saying: no switching is done:\n      switching = false;\n      rows = table.rows;\n      /* Loop through all table rows (except the\n      first, which contains table headers): */\n      for (i = 1; i < (rows.length - 1); i++) {\n        // Start by saying there should be no switching:\n        shouldSwitch = false;\n        /* Get the two elements you want to compare,\n        one from current row and one from the next: */\n        x = rows[i].getElementsByTagName(\"TD\")[n];\n        y = rows[i + 1].getElementsByTagName(\"TD\")[n];\n        /* Check if the two rows should switch place,\n        based on the direction, asc or desc: */\n        if (dir == \"asc\") {\n          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n            // If so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        } else if (dir == \"desc\") {\n          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\n            // If so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        }\n      }\n      if (shouldSwitch) {\n        /* If a switch has been marked, make the switch\n        and mark that a switch has been done: */\n        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n        switching = true;\n        // Each time a switch is done, increase this count by 1:\n        switchcount ++;\n      } else {\n        /* If no switching has been done AND the direction is \"asc\",\n        set the direction to \"desc\" and run the while loop again. */\n        if (switchcount == 0 && dir == \"asc\") {\n          dir = \"desc\";\n          switching = true;\n        }\n      }\n    }\n  }\n \n\n//   async function callSort() {\n//       await getapi();\n//       sortTable(1,\"asc\") ;\n//       sortTable(4,\"asc\") ;\n//   }\n\n  "]}